%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 857
%%HiResBoundingBox: 0 0 2391.1199 856.07996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 856.07996 re
W
q
[0.24 0 0 -0.24 0 856.07996] cm
q
0 0 9962.5 3565.625 re
W*
q
[3.979528 0 0 3.980047 -232.25089 -205.64906] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
661.79999 226 m
637 215.3 l
624.40002 209.90001 609.59998 215.7 604.20001 228.3 c
567.29999 314 l
269.79999 185.89999 l
265.59998 151.799988 236.39999 125.299995 201.19998 125.299995 c
163.099976 125.299995 131.999985 156.299988 131.999985 194.39999 c
131.999985 232.5 162.999985 263.59998 201.19998 263.59998 c
213.49998 263.59998 225.09998 260.39996 235.09998 254.69998 c
557.5 393.59998 l
584.59998 405.29999 l
595.39996 410 607.89996 406.29999 614.59998 397.09998 c
615.69995 395.59998 616.59998 393.99997 617.29999 392.29999 c
628.39996 366.59998 l
628.59998 366.19998 l
674.89996 258.69998 l
680.29999 246.2 674.40002 231.5 661.79999 226 c
h
201.2 231.89999 m
198.8 231.89999 196.5 231.7 194.2 231.2 c
176.89999 227.89999 163.800003 212.7 163.800003 194.39999 c
163.800003 173.79999 180.60001 157 201.20001 157 c
212.40001 157 222.40001 161.899994 229.20001 169.7 c
235.00002 176.3 238.60001 185 238.60001 194.5 c
238.60001 215.10001 221.8 231.89999 201.2 231.89999 c
h
f
628.29999 366.70001 m
628.20001 367 628.09998 367.20001 628 367.5 c
617.29999 392.29999 l
617.29999 392.29999 617.29999 392.39999 617.20001 392.39999 c
628.29999 366.70001 l
h
f
545.29999 279.79999 m
387.89999 212 l
381.79999 209.39999 379 202.3 381.60001 196.2 c
402.60001 147.5 l
405.20001 141.399994 412.30002 138.600006 418.39999 141.199997 c
575.79999 209 l
581.89996 211.60001 584.70001 218.7 582.09998 224.8 c
561.09998 273.5 l
558.5 279.60001 551.40002 282.39999 545.29999 279.79999 c
h
f
614.5 397.20001 m
607.79999 406.40002 595.29999 410.10001 584.40002 405.5 c
559.60004 394.79999 l
558.90002 394.5 558.10004 394.09998 557.40002 393.69998 c
584.5 405.39999 l
595.40002 410 607.79999 406.39999 614.5 397.20001 c
h
f
630.29999 632.5 m
605.39996 621.90002 l
605.39996 621.90002 605.29999 621.90002 605.29999 621.80005 c
630.29999 632.5 l
h
f
717.5 549.40002 m
784.59998 391.70001 l
787.19995 385.60001 794.29999 382.80002 800.29999 385.40002 c
849 406.10004 l
855.09998 408.70004 857.90002 415.80005 855.29999 421.80005 c
788.20001 579.50006 l
785.60004 585.60004 778.5 588.40009 772.5 585.80005 c
723.79999 565.10004 l
717.79999 562.5 714.90002 555.40002 717.5 549.40002 c
h
f
597 616.09998 m
597.09998 616.19995 597.09998 616.19995 597.20001 616.29999 c
597.20001 616.20001 597.09998 616.20001 597 616.09998 c
597.09998 616.09998 597.09998 616.09998 597 616.09998 c
h
f
597.20001 616.20001 m
597.5 616.5 597.70001 616.79999 598 617 c
597.70001 616.79999 597.5 616.5 597.20001 616.20001 c
h
f
596.09998 615 m
596.39996 615.40002 596.69995 615.70001 597 616 c
590.29999 609 588 598.40002 592 589 c
602.59998 564.09998 l
602.89996 563.39996 603.29999 562.69995 603.69995 562 c
592.19995 589.09998 l
590.69995 592.69995 589.99994 596.5 590.19995 600.19995 c
590.19995 600.49994 590.19995 600.69995 590.29993 600.89996 c
590.29993 601.19995 590.29993 601.39996 590.3999 601.69995 c
590.3999 601.69995 590.3999 601.79993 590.3999 601.79993 c
590.49988 602.19995 590.49988 602.69995 590.59991 603.09991 c
590.69989 603.49994 590.69989 603.8999 590.79993 604.29993 c
590.79993 604.49994 590.8999 604.69995 590.99994 604.8999 c
591.09991 605.29993 591.19995 605.59991 591.29993 605.8999 c
591.3999 606.29993 591.49994 606.69989 591.69995 607.09991 c
591.69995 607.29993 591.79993 607.3999 591.89996 607.59991 c
591.99994 607.99994 592.19995 608.3999 592.39996 608.69989 c
592.59998 609.09991 592.69995 609.3999 592.89996 609.79987 c
592.99994 609.99988 593.09998 610.29987 593.29999 610.49988 c
593.29999 610.59985 593.39996 610.69989 593.39996 610.79987 c
593.59998 611.09985 593.69995 611.39984 593.89996 611.59985 c
593.99994 611.89984 594.19995 612.09985 594.39996 612.29987 c
594.59998 612.59985 594.79999 612.99988 595.09998 613.29987 c
595.29999 613.49988 595.39996 613.79987 595.59998 613.99988 c
595.59998 614.40002 595.79999 614.70001 596.09998 615 c
h
f
599.29999 618.20001 m
598.89996 617.79999 598.5 617.5 598.09998 617.10004 c
598.40002 617.40002 598.79999 617.79999 599.29999 618.20001 c
h
f
375.79999 610.90002 m
365 636.59998 l
365.10001 636.39996 365.20001 636.09998 365.29999 635.89996 c
375.79999 610.99994 l
375.79999 610.90002 375.79999 610.90002 375.79999 610.90002 c
h
f
448.79999 722.79999 m
606.79999 789.20001 l
612.89996 791.79999 615.79999 798.79999 613.20001 804.90002 c
592.70001 853.70001 l
590.10004 859.79999 583.10004 862.70001 577 860.10004 c
419 793.70001 l
412.89999 791.10004 410 784.10004 412.60001 778 c
433.10001 729.20001 l
435.60001 723.09998 442.70001 720.20001 448.79999 722.79999 c
h
f
435.5 609 m
408.39999 597.59998 l
398.69998 593.59998 387.79999 596.09998 380.89999 603.19995 c
387.79999 595.99994 398.79999 593.39996 408.5 597.49994 c
433.39999 607.99994 l
434.20001 608.29999 434.89999 608.59998 435.5 609 c
h
f
385.70001 381.39999 m
359.70001 370.60001 l
360 370.70001 360.30002 370.80002 360.60001 371 c
385.60001 381.39999 l
385.70001 381.29999 385.70001 381.29999 385.70001 381.39999 c
h
f
274.10001 454.79999 m
208.40001 613.09998 l
205.90001 619.19995 198.8 622.09998 192.70001 619.59998 c
143.800018 599.29999 l
137.700012 596.79999 134.800018 589.70001 137.300018 583.59998 c
203 425.39999 l
205.5 419.29999 212.60001 416.39999 218.7 418.89999 c
267.60001 439.19998 l
273.79999 441.70001 276.70001 448.70001 274.10001 454.79999 c
h
f
798.79999 133 m
760.70001 133 729.59998 164 729.59998 202.10001 c
729.59998 216 733.69995 228.90001 740.79999 239.70001 c
603.70001 562 l
592.20001 589.09998 l
590.70001 592.69995 590 596.5 590.20001 600.19995 c
590.20001 600.39996 590.20001 600.69995 590.29999 600.89996 c
590.29999 601.19995 590.29999 601.39996 590.39996 601.69995 c
590.39996 601.69995 590.39996 601.79993 590.39996 601.79993 c
590.49994 602.19995 590.49994 602.69995 590.59998 603.09991 c
590.69995 603.49994 590.69995 603.8999 590.79999 604.29993 c
590.79999 604.49994 590.89996 604.69995 591 604.8999 c
591.09998 605.29993 591.20001 605.59991 591.29999 605.8999 c
591.39996 606.29993 591.5 606.69989 591.70001 607.09991 c
591.70001 607.29993 591.79999 607.3999 591.90002 607.59991 c
592 607.99994 592.20001 608.3999 592.40002 608.69989 c
592.60004 609.09991 592.70001 609.3999 592.90002 609.79987 c
593 609.99988 593.10004 610.29987 593.30005 610.49988 c
593.30005 610.59985 593.40002 610.69989 593.40002 610.79987 c
593.60004 611.09985 593.70001 611.39984 593.90002 611.59985 c
594 611.89984 594.20001 612.09985 594.40002 612.29987 c
594.60004 612.59985 594.80005 612.99988 595.10004 613.29987 c
595.30005 613.49988 595.40002 613.79987 595.60004 613.99988 c
595.90002 614.29987 596.10004 614.59985 596.40002 614.99988 c
596.60004 615.19989 596.70001 615.3999 596.90002 615.59985 c
597 615.69983 597 615.69983 597.10004 615.79987 c
597.20001 615.89984 597.20001 615.89984 597.30005 615.99988 c
597.40002 616.09985 597.40002 616.09985 597.40002 616.09985 c
598.10004 616.79987 598.80005 617.49988 599.60004 618.09985 c
600.00006 618.39984 600.40002 618.69983 600.80005 618.99988 c
602.30005 620.09985 603.90002 620.99988 605.60004 621.69989 c
630.60004 632.3999 l
631.80005 632.8999 l
739.50006 678.69989 l
752.10004 684.09991 766.90009 678.09991 772.20007 665.49988 c
782.80005 640.59985 l
788.20007 627.99988 782.20007 613.29987 769.60004 607.89984 c
683.70001 571.39984 l
811.90002 270.09985 l
844 264.09985 868.30005 235.89986 868.30005 202.09985 c
868 164 837 133 798.79999 133 c
h
826.09998 227.7 m
819.29999 235 809.59998 239.5 798.79999 239.5 c
778.20001 239.5 761.39996 222.7 761.39996 202.10001 c
761.39996 201.40001 761.39996 200.60001 761.49994 199.90001 c
762.59991 180.3 778.89996 164.700012 798.89996 164.700012 c
819.49994 164.700012 836.29999 181.50002 836.29999 202.10001 c
836.29999 212 832.40002 221 826.09998 227.7 c
h
f
392.10001 385.20001 m
390.20001 383.60001 388.10001 382.30002 385.80002 381.40002 c
359.80002 370.60004 l
359.50003 370.50003 l
251.40002 325.70004 l
238.70003 320.40005 224.00003 326.50003 218.80002 339.20004 c
208.40002 364.20004 l
203.10002 376.90005 209.20003 391.60004 221.90002 396.80005 c
308.10004 432.60004 l
181.7 737.20001 l
153 745.60004 132 772.20001 132 803.60004 c
132 841.70001 163 872.80005 201.2 872.80005 c
239.29999 872.80005 270.39999 841.80005 270.39999 803.60004 c
270.39999 787.40002 264.79999 772.50006 255.39999 760.70001 c
387.89999 441.20001 l
388.29999 440.5 388.60001 439.80002 388.89999 439.10001 c
399.29999 414.10001 l
403.5 403.70001 400.29999 392 392.10001 385.20001 c
h
201.2 841 m
180.59999 841 163.799988 824.20001 163.799988 803.59998 c
163.799988 796 166.099991 789 169.89999 783.09998 c
176.59999 772.89996 188.09999 766.19995 201.2 766.19995 c
220.5 766.19995 236.39999 780.89996 238.39999 799.69995 c
238.5 800.99994 238.59999 802.29993 238.59999 803.59998 c
238.60001 824.20001 221.8 841 201.2 841 c
h
f
795 736.29999 m
782.5 736.29999 770.70001 739.70001 760.5 745.5 c
435.5 609 l
408.39999 597.59998 l
398.69998 593.59998 387.79999 596.09998 380.89999 603.19995 c
378.79999 605.39996 377 607.89996 375.79999 610.89996 c
365 636.59998 l
319.5 745 l
314.20001 757.70001 320.20001 772.40002 332.79999 777.70001 c
357.69998 788.20001 l
370.39999 793.5 385.09998 787.5 390.39999 774.90002 c
426.60001 688.80005 l
726.5 814.80005 l
731 848.60004 760 874.70007 795 874.70007 c
833.09998 874.70007 864.20001 843.70007 864.20001 805.50006 c
864.20001 767.40002 833.20001 736.29999 795 736.29999 c
h
795 842.90002 m
783.70001 842.90002 773.59998 837.90002 766.79999 830 c
761.09998 823.40002 757.59998 814.79999 757.59998 805.5 c
757.59998 784.90002 774.39996 768.09998 795 768.09998 c
796.90002 768.09998 798.70001 768.19995 800.59998 768.5 c
818.59998 771.20001 832.5 786.79999 832.5 805.5 c
832.5 826.09998 815.70001 842.90002 795 842.90002 c
h
f
Q
q
[21.997517 0 0 22.000387 3791.9978 1252.04834] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
16.68 8.359 m
16.660469 8.437125 l
18.847969 8.437125 20.898769 8.847285 22.832369 9.687125 c
24.765968 10.526965 26.465168 11.659825 27.930069 13.085526 c
23.43787 17.577724 l
21.543369 15.702725 19.29727 14.765225 16.69957 14.765225 c
14.06287 14.765225 11.81677 15.702725 9.961269 17.577724 c
8.105769 19.452724 7.168269 21.698824 7.168269 24.316025 c
7.168269 26.952724 8.105769 29.198826 9.961269 31.054325 c
11.81677 32.909824 14.06287 33.847324 16.69957 33.847324 c
19.336269 33.847324 21.582371 32.909824 23.457371 31.034824 c
27.94957 35.527023 l
26.48477 36.972324 24.785469 38.105122 22.85187 38.945023 c
20.91827 39.784924 18.86747 40.195023 16.67997 40.195023 c
12.30497 40.195023 8.55497 38.632523 5.44997 35.527023 c
2.344971 32.421524 0.78197 28.671524 0.78197 24.297024 c
0.78197 19.922523 2.34447 16.172024 5.44997 13.047024 c
8.555471 9.922024 12.305471 8.359524 16.67997 8.359524 c
16.68 8.359 l
h
45.390938 8.359 m
49.765938 8.359 53.515938 9.9215 56.640938 13.0465 c
59.765938 16.171501 61.328438 19.921501 61.328438 24.296501 c
61.328438 28.671501 59.765938 32.421501 56.640938 35.526501 c
53.515938 38.6315 49.765938 40.1945 45.390938 40.1945 c
41.015938 40.1945 37.265938 38.632 34.160938 35.526501 c
31.055939 32.421001 29.492939 28.671001 29.492939 24.296501 c
29.492939 19.922001 31.055439 16.171501 34.160938 13.046501 c
37.266438 9.921501 41.016438 8.359001 45.390938 8.359001 c
45.390938 8.359 l
h
45.390938 14.707 m
42.754238 14.707 40.508137 15.6445 38.652637 17.519501 c
36.797138 19.394501 35.859638 21.6406 35.859638 24.257801 c
35.859638 26.894501 36.797138 29.140602 38.652637 30.996101 c
40.508137 32.851601 42.754238 33.789101 45.390938 33.789101 c
48.008137 33.789101 50.254238 32.851601 52.129238 30.996101 c
54.004238 29.140602 54.941738 26.894501 54.941738 24.257801 c
54.941738 21.640602 54.004238 19.394501 52.129238 17.519501 c
50.254238 15.644501 48.008137 14.707001 45.390938 14.707001 c
45.390938 14.707 l
h
71.386711 8.594 m
71.386711 8.574469 l
75.70311 8.574469 79.78511 10.117469 82.870712 13.203369 c
88.495712 18.828369 88.495712 29.78537 82.870712 35.391369 c
79.784813 38.457767 75.702713 40.000771 71.386711 40.000771 c
63.613312 40.000771 l
63.613312 8.59477 l
71.386711 8.59477 l
71.386711 8.594 l
h
71.406212 33.691399 m
71.425743 33.691399 l
74.003845 33.691399 76.386642 32.968739 78.222641 31.132799 c
80.05864 29.29686 80.781242 26.875 80.781242 24.277298 c
80.781242 21.699198 80.058586 19.277298 78.20314 17.421799 c
76.367241 15.566299 73.945343 14.843699 71.367241 14.843699 c
69.921944 14.843699 l
69.921944 33.691696 l
71.406342 33.691696 l
71.406212 33.691399 l
h
89.433594 40 m
89.433594 8.516001 l
95.742195 8.516001 l
95.742195 40 l
89.433594 40 l
h
110.585938 8.516 m
116.894539 8.516 l
116.894539 33.692001 l
129.472534 33.692001 l
129.472534 40.000603 l
110.585533 40.000603 l
110.585533 8.516604 l
110.585938 8.516 l
h
146.933899 8.359 m
151.308899 8.359 155.058899 9.9215 158.183899 13.0465 c
161.308899 16.171501 162.871399 19.921501 162.871399 24.296501 c
162.871399 28.671501 161.308899 32.421501 158.183899 35.526501 c
155.058899 38.6315 151.308899 40.1945 146.933899 40.1945 c
142.558899 40.1945 138.808899 38.632 135.703903 35.526501 c
132.598907 32.421001 131.035904 28.671001 131.035904 24.296501 c
131.035904 19.922001 132.598404 16.171501 135.703903 13.046501 c
138.809402 9.921501 142.559402 8.359001 146.933899 8.359001 c
146.933899 8.359 l
h
146.933899 14.707 m
144.297195 14.707 142.051102 15.6445 140.195602 17.519501 c
138.340103 19.394501 137.402603 21.6406 137.402603 24.257801 c
137.402603 26.894501 138.340103 29.140602 140.195602 30.996101 c
142.051102 32.851601 144.297195 33.789101 146.933899 33.789101 c
149.551102 33.789101 151.797195 32.851601 153.672195 30.996101 c
155.547195 29.140602 156.484695 26.894501 156.484695 24.257801 c
156.484695 21.640602 155.547195 19.394501 153.672195 17.519501 c
151.797195 15.644501 149.551102 14.707001 146.933899 14.707001 c
146.933899 14.707 l
h
180.29327 8.359 m
184.66827 8.359 188.41827 9.9215 191.54327 13.0465 c
194.66827 16.171501 196.23077 19.921501 196.23077 24.296501 c
196.23077 28.671501 194.66827 32.421501 191.54327 35.526501 c
188.41827 38.6315 184.66827 40.1945 180.29327 40.1945 c
175.91827 40.1945 172.16827 38.632 169.06328 35.526501 c
165.958282 32.421001 164.395279 28.671001 164.395279 24.296501 c
164.395279 19.922001 165.957779 16.171501 169.06328 13.046501 c
172.16878 9.921501 175.91878 8.359001 180.29327 8.359001 c
180.29327 8.359 l
h
180.29327 14.707 m
177.65657 14.707 175.41048 15.6445 173.55498 17.519501 c
171.69948 19.394501 170.76198 21.6406 170.76198 24.257801 c
170.76198 26.894501 171.69948 29.140602 173.55498 30.996101 c
175.41048 32.851601 177.65657 33.789101 180.29327 33.789101 c
182.91048 33.789101 185.15657 32.851601 187.03157 30.996101 c
188.90657 29.140602 189.84407 26.894501 189.84407 24.257801 c
189.84407 21.640602 188.90657 19.394501 187.03157 17.519501 c
185.15657 15.644501 182.91048 14.707001 180.29327 14.707001 c
180.29327 14.707 l
h
198.53516 40 m
198.53516 30.5469 l
198.53516 19.530899 l
198.53516 8.514899 l
204.84375 8.514899 l
209.55075 8.514899 l
212.57805 8.514899 215.17575 9.589099 217.34375 11.757099 c
219.51175 13.925099 220.58595 16.522699 220.58595 19.550098 c
220.58595 22.577497 219.51175 25.175098 217.34375 27.323498 c
215.17575 29.471897 212.57816 30.546198 209.55075 30.546198 c
204.84375 30.546198 l
204.84375 39.999298 l
198.53516 39.999298 l
198.53516 40 l
h
204.84375 24.257999 m
209.55075 24.277531 l
210.85934 24.277531 211.97266 23.808781 212.89055 22.890831 c
213.80844 21.972881 214.27725 20.859531 214.27725 19.551031 c
214.27725 18.26193 213.8085 17.148731 212.89055 16.211231 c
211.9726 15.273731 210.85925 14.804932 209.55075 14.804932 c
204.84375 14.804932 l
204.84375 19.531532 l
204.84375 24.258133 l
204.84375 24.257999 l
h
223.32031 8.516 m
242.20731 8.516 l
242.20731 14.8051 l
229.6293 14.8051 l
229.6293 21.113699 l
239.0629 21.113699 l
239.0629 27.4028 l
229.6293 27.4028 l
229.6293 33.691898 l
242.20731 33.691898 l
242.20731 40.0005 l
229.6293 40.0005 l
223.32071 40.0005 l
223.32071 8.516501 l
223.32031 8.516 l
h
245.13672 40 m
245.11719 8.476999 l
255.35118 8.476999 l
258.37848 8.476999 261.36679 9.531699 263.53479 11.699699 c
265.70279 13.8677 266.5817 15.898899 266.5817 18.9263 c
266.5817 19.902861 l
266.5817 22.24666 265.91763 23.965361 264.58951 25.840361 c
263.26138 27.715361 262.1481 28.26226 260.07782 29.043461 c
267.18723 40.000462 l
259.49191 40.000462 l
251.44501 27.695461 l
251.44501 40.000462 l
245.13641 40.000462 l
245.13672 40 l
h
251.42581 23.632999 m
255.93752 23.652531 l
257.24612 23.652531 257.91022 23.320501 258.82813 22.402531 c
259.74603 21.48456 260.07813 20.429831 260.07813 19.121231 c
260.07813 17.83213 259.74609 16.972832 258.82813 16.035332 c
257.91016 15.097832 256.26953 14.765832 254.96092 14.765832 c
251.42572 14.765832 l
251.42572 23.633032 l
251.42581 23.632999 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
